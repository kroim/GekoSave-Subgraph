// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionCanceled extends ethereum.Event {
  get params(): AuctionCanceled__Params {
    return new AuctionCanceled__Params(this);
  }
}

export class AuctionCanceled__Params {
  _event: AuctionCanceled;

  constructor(event: AuctionCanceled) {
    this._event = event;
  }

  get _auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AuctionCreated extends ethereum.Event {
  get params(): AuctionCreated__Params {
    return new AuctionCreated__Params(this);
  }
}

export class AuctionCreated__Params {
  _event: AuctionCreated;

  constructor(event: AuctionCreated) {
    this._event = event;
  }

  get auction(): AuctionCreatedAuctionStruct {
    return this._event.parameters[0].value.toTuple() as AuctionCreatedAuctionStruct;
  }
}

export class AuctionCreatedAuctionStruct extends ethereum.Tuple {
  get auctionId(): BigInt {
    return this[0].toBigInt();
  }

  get collectionId(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get startTime(): BigInt {
    return this[3].toBigInt();
  }

  get endTime(): BigInt {
    return this[4].toBigInt();
  }

  get startPrice(): BigInt {
    return this[5].toBigInt();
  }

  get creator(): Address {
    return this[6].toAddress();
  }

  get owner(): Address {
    return this[7].toAddress();
  }

  get active(): boolean {
    return this[8].toBoolean();
  }
}

export class AuctionFinalized extends ethereum.Event {
  get params(): AuctionFinalized__Params {
    return new AuctionFinalized__Params(this);
  }
}

export class AuctionFinalized__Params {
  _event: AuctionFinalized;

  constructor(event: AuctionFinalized) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auction(): AuctionFinalizedAuctionStruct {
    return this._event.parameters[1].value.toTuple() as AuctionFinalizedAuctionStruct;
  }
}

export class AuctionFinalizedAuctionStruct extends ethereum.Tuple {
  get auctionId(): BigInt {
    return this[0].toBigInt();
  }

  get collectionId(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get startTime(): BigInt {
    return this[3].toBigInt();
  }

  get endTime(): BigInt {
    return this[4].toBigInt();
  }

  get startPrice(): BigInt {
    return this[5].toBigInt();
  }

  get creator(): Address {
    return this[6].toAddress();
  }

  get owner(): Address {
    return this[7].toAddress();
  }

  get active(): boolean {
    return this[8].toBoolean();
  }
}

export class BidSuccess extends ethereum.Event {
  get params(): BidSuccess__Params {
    return new BidSuccess__Params(this);
  }
}

export class BidSuccess__Params {
  _event: BidSuccess;

  constructor(event: BidSuccess) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _auctionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _bidIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GekoSaveAuction__auctionBidsResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GekoSaveAuction__auctionsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: Address;
  value8: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: Address,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }
}

export class GekoSaveAuction__getCurrentBidsResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class GekoSaveAuction extends ethereum.SmartContract {
  static bind(address: Address): GekoSaveAuction {
    return new GekoSaveAuction("GekoSaveAuction", address);
  }

  MIN_BID_INCREMENT_PERCENT(): BigInt {
    let result = super.call(
      "MIN_BID_INCREMENT_PERCENT",
      "MIN_BID_INCREMENT_PERCENT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_BID_INCREMENT_PERCENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_BID_INCREMENT_PERCENT",
      "MIN_BID_INCREMENT_PERCENT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERCENTS_DIVIDER(): BigInt {
    let result = super.call(
      "PERCENTS_DIVIDER",
      "PERCENTS_DIVIDER():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENTS_DIVIDER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENTS_DIVIDER",
      "PERCENTS_DIVIDER():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionBids(
    param0: BigInt,
    param1: BigInt
  ): GekoSaveAuction__auctionBidsResult {
    let result = super.call(
      "auctionBids",
      "auctionBids(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new GekoSaveAuction__auctionBidsResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_auctionBids(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<GekoSaveAuction__auctionBidsResult> {
    let result = super.tryCall(
      "auctionBids",
      "auctionBids(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GekoSaveAuction__auctionBidsResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  auctions(param0: BigInt): GekoSaveAuction__auctionsResult {
    let result = super.call(
      "auctions",
      "auctions(uint256):(uint256,address,uint256,uint256,uint256,uint256,address,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new GekoSaveAuction__auctionsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toAddress(),
      result[8].toBoolean()
    );
  }

  try_auctions(
    param0: BigInt
  ): ethereum.CallResult<GekoSaveAuction__auctionsResult> {
    let result = super.tryCall(
      "auctions",
      "auctions(uint256):(uint256,address,uint256,uint256,uint256,uint256,address,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GekoSaveAuction__auctionsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toAddress(),
        value[8].toBoolean()
      )
    );
  }

  devAddress(): Address {
    let result = super.call("devAddress", "devAddress():(address)", []);

    return result[0].toAddress();
  }

  try_devAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("devAddress", "devAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  devFee(): BigInt {
    let result = super.call("devFee", "devFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_devFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("devFee", "devFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuctionsAmount(_owner: Address): BigInt {
    let result = super.call(
      "getAuctionsAmount",
      "getAuctionsAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBigInt();
  }

  try_getAuctionsAmount(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAuctionsAmount",
      "getAuctionsAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuctionsLength(): BigInt {
    let result = super.call(
      "getAuctionsLength",
      "getAuctionsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAuctionsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAuctionsLength",
      "getAuctionsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBidsAmount(_auctionId: BigInt): BigInt {
    let result = super.call(
      "getBidsAmount",
      "getBidsAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );

    return result[0].toBigInt();
  }

  try_getBidsAmount(_auctionId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBidsAmount",
      "getBidsAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentBids(_auctionId: BigInt): GekoSaveAuction__getCurrentBidsResult {
    let result = super.call(
      "getCurrentBids",
      "getCurrentBids(uint256):(uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );

    return new GekoSaveAuction__getCurrentBidsResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_getCurrentBids(
    _auctionId: BigInt
  ): ethereum.CallResult<GekoSaveAuction__getCurrentBidsResult> {
    let result = super.tryCall(
      "getCurrentBids",
      "getCurrentBids(uint256):(uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GekoSaveAuction__getCurrentBidsResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  getOwnedAuctions(_owner: Address): Array<BigInt> {
    let result = super.call(
      "getOwnedAuctions",
      "getOwnedAuctions(address):(uint256[])",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBigIntArray();
  }

  try_getOwnedAuctions(_owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getOwnedAuctions",
      "getOwnedAuctions(address):(uint256[])",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  managerAddress(): Address {
    let result = super.call("managerAddress", "managerAddress():(address)", []);

    return result[0].toAddress();
  }

  try_managerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "managerAddress",
      "managerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  managerFee(): BigInt {
    let result = super.call("managerFee", "managerFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_managerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("managerFee", "managerFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ownedAuctions(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "ownedAuctions",
      "ownedAuctions(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_ownedAuctions(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownedAuctions",
      "ownedAuctions(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royalty(): BigInt {
    let result = super.call("royalty", "royalty():(uint256)", []);

    return result[0].toBigInt();
  }

  try_royalty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("royalty", "royalty():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _devAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _managerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BidOnAuctionCall extends ethereum.Call {
  get inputs(): BidOnAuctionCall__Inputs {
    return new BidOnAuctionCall__Inputs(this);
  }

  get outputs(): BidOnAuctionCall__Outputs {
    return new BidOnAuctionCall__Outputs(this);
  }
}

export class BidOnAuctionCall__Inputs {
  _call: BidOnAuctionCall;

  constructor(call: BidOnAuctionCall) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BidOnAuctionCall__Outputs {
  _call: BidOnAuctionCall;

  constructor(call: BidOnAuctionCall) {
    this._call = call;
  }
}

export class CreateAuctionCall extends ethereum.Call {
  get inputs(): CreateAuctionCall__Inputs {
    return new CreateAuctionCall__Inputs(this);
  }

  get outputs(): CreateAuctionCall__Outputs {
    return new CreateAuctionCall__Outputs(this);
  }
}

export class CreateAuctionCall__Inputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get _collectionId(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _startPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _startTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _endTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateAuctionCall__Outputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }
}

export class FinalizeAuctionCall extends ethereum.Call {
  get inputs(): FinalizeAuctionCall__Inputs {
    return new FinalizeAuctionCall__Inputs(this);
  }

  get outputs(): FinalizeAuctionCall__Outputs {
    return new FinalizeAuctionCall__Outputs(this);
  }
}

export class FinalizeAuctionCall__Inputs {
  _call: FinalizeAuctionCall;

  constructor(call: FinalizeAuctionCall) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FinalizeAuctionCall__Outputs {
  _call: FinalizeAuctionCall;

  constructor(call: FinalizeAuctionCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _devAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _managerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
